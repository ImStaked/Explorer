{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BAvatar, BCardFooter, BRow, BCol, BCardTitle, BAlert, BBadge, BCard, BCardBody, BInputGroup, BFormInput, BInputGroupAppend, BButton } from 'bootstrap-vue';\nimport fetch from 'node-fetch';\nimport { consensusPubkeyToHexAddress, getLocalChains, getCachedValidators, toDay } from '@/libs/utils';\nimport vSelect from 'vue-select';\nimport DashboardCardHorizontal from './components/dashboard/DashboardCardHorizontal.vue';\nexport default {\n  components: {\n    BAlert: BAlert,\n    BBadge: BBadge,\n    BRow: BRow,\n    BCol: BCol,\n    BCard: BCard,\n    BCardBody: BCardBody,\n    BCardFooter: BCardFooter,\n    BInputGroup: BInputGroup,\n    BFormInput: BFormInput,\n    BInputGroupAppend: BInputGroupAppend,\n    BButton: BButton,\n    BAvatar: BAvatar,\n    BCardTitle: BCardTitle,\n    vSelect: vSelect,\n    DashboardCardHorizontal: DashboardCardHorizontal\n  },\n  data: function data() {\n    var chains = getLocalChains();\n    return {\n      showPrevote: false,\n      httpstatus: 200,\n      httpStatusText: '',\n      roundState: {},\n      chains: chains,\n      vals: [],\n      positions: [],\n      updatetime: new Date(),\n      rpc: '',\n      height: '-',\n      round: '-',\n      step: '-',\n      rate: '-'\n    };\n  },\n  computed: {\n    selected: function selected() {\n      return this.$store.state.chains.selected.chain_name;\n    }\n  },\n  created: function created() {\n    this.validators();\n    this.rpc = \"\".concat(this.chains[this.selected].rpc[0], \"/consensus_state\");\n    this.fetchPosition();\n    this.update();\n    this.timer = setInterval(this.update, 6000);\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  methods: {\n    format: function format(v) {\n      return toDay(v, 'time');\n    },\n    color: function color(i, txt) {\n      if (i === this.roundState.proposer.index) {\n        return txt === 'nil-Vote' ? 'dark' : 'primary';\n      }\n\n      return txt === 'nil-Vote' ? 'secondary' : 'success';\n    },\n    fetchPosition: function fetchPosition() {\n      var _this = this;\n\n      var dumpurl = this.rpc.replace('consensus_state', 'dump_consensus_state');\n      fetch(dumpurl).then(function (data) {\n        _this.httpstatus = data.status;\n        _this.httpStatusText = data.httpStatusText;\n        return data.json();\n      }).then(function (res) {\n        _this.positions = res.result.round_state.validators.validators;\n      });\n    },\n    update: function update() {\n      var _this2 = this;\n\n      this.rate = '0%';\n      this.updatetime = new Date();\n\n      if (this.httpstatus === 200) {\n        fetch(this.rpc).then(function (data) {\n          _this2.httpstatus = data.status;\n          _this2.httpStatusText = data.httpStatusText;\n          return data.json();\n        }).then(function (res) {\n          _this2.roundState = res.result.round_state;\n\n          var raw = _this2.roundState['height/round/step'].split('/'); // eslint-disable-next-line prefer-destructuring\n\n\n          _this2.height = raw[0]; // eslint-disable-next-line prefer-destructuring\n\n          _this2.round = raw[1]; // eslint-disable-next-line prefer-destructuring\n\n          _this2.step = raw[2]; // find the highest onboard rate\n\n          _this2.roundState.height_vote_set.forEach(function (element) {\n            var rate = Number(element.prevotes_bit_array.substring(element.prevotes_bit_array.length - 4));\n\n            if (rate > 0) {\n              _this2.rate = \"\".concat((rate * 100).toFixed(), \"%\");\n            }\n          });\n        }).catch(function (err) {\n          _this2.httpstatus = 500;\n          _this2.httpStatusText = err;\n        });\n      }\n    },\n    validators: function validators() {\n      var _this3 = this;\n\n      var conf = this.chains[this.selected];\n      var vals = [];\n      this.$http.getValidatorList(conf).then(function (data) {\n        vals = data;\n      }).catch(function () {\n        vals = getCachedValidators(_this3.selected.chain_name) || [];\n      }).finally(function () {\n        _this3.vals = vals.map(function (x) {\n          var x2 = x;\n          x2.hex = consensusPubkeyToHexAddress(x.consensus_pubkey);\n          return x2;\n        });\n      });\n    },\n    onchange: function onchange() {\n      this.httpstatus = 200;\n      this.httpStatusText = '';\n      this.roundState = {}; // this.validators()\n    },\n    showName: function showName(i, text) {\n      var _this4 = this,\n          _val$description2;\n\n      if (text === 'nil-Vote') {\n        if (this.positions[i]) {\n          var _val$description;\n\n          var _val = this.vals.find(function (x) {\n            return x.hex === _this4.positions[i].address;\n          });\n\n          return (_val === null || _val === void 0 ? void 0 : (_val$description = _val.description) === null || _val$description === void 0 ? void 0 : _val$description.moniker) || i;\n        }\n\n        return i;\n      }\n\n      var txt = text.substring(text.indexOf(':') + 1, text.indexOf(' '));\n      var val = this.vals.find(function (x) {\n        return x.hex.startsWith(txt);\n      });\n      return (val === null || val === void 0 ? void 0 : (_val$description2 = val.description) === null || _val$description2 === void 0 ? void 0 : _val$description2.moniker) || txt;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqIA,SACAA,OADA,EACAC,WADA,EACAC,IADA,EACAC,IADA,EACAC,UADA,EACAC,MADA,EACAC,MADA,EAEAC,KAFA,EAEAC,SAFA,EAEAC,WAFA,EAEAC,UAFA,EAEAC,iBAFA,EAEAC,OAFA,QAGA,eAHA;AAIA;AACA,SACAC,2BADA,EACAC,cADA,EACAC,mBADA,EACAC,KADA,QAEA,cAFA;AAGA;AACA;AAEA;EACAC;IACAZ,cADA;IAEAC,cAFA;IAGAJ,UAHA;IAIAC,UAJA;IAKAI,YALA;IAMAC,oBANA;IAOAP,wBAPA;IAQAQ,wBARA;IASAC,sBATA;IAUAC,oCAVA;IAWAC,gBAXA;IAYAZ,gBAZA;IAaAI,sBAbA;IAcAc,gBAdA;IAeAC;EAfA,CADA;EAmBAC,IAnBA,kBAmBA;IACA;IACA;MACAC,kBADA;MAEAC,eAFA;MAGAC,kBAHA;MAIAC,cAJA;MAKAC,cALA;MAMAC,QANA;MAOAC,aAPA;MAQAC,sBARA;MASAC,OATA;MAUAC,WAVA;MAWAC,UAXA;MAYAC,SAZA;MAaAC;IAbA;EAeA,CApCA;EAqCAC;IACAC,QADA,sBACA;MACA;IACA;EAHA,CArCA;EA0CAC,OA1CA,qBA0CA;IACA;IACA;IACA;IACA;IACA;EACA,CAhDA;EAiDAC,aAjDA,2BAiDA;IACAC;EACA,CAnDA;EAoDAC;IACAC;MAAA;IAAA,CADA;IAEAC,KAFA,iBAEAC,CAFA,EAEAC,GAFA,EAEA;MACA;QACA;MACA;;MACA;IACA,CAPA;IAQAC,aARA,2BAQA;MAAA;;MACA;MACAC;QACA;QACA;QACA;MACA,CAJA,EAIAC,IAJA,CAIA;QACA;MACA,CANA;IAOA,CAjBA;IAkBAC,MAlBA,oBAkBA;MAAA;;MACA;MACA;;MACA;QACAF;UACA;UACA;UACA;QACA,CAJA,EAIAC,IAJA,CAIA;UACA;;UACA,4DAFA,CAGA;;;UACA,uBAJA,CAKA;;UACA,sBANA,CAOA;;UACA,qBARA,CAUA;;UACA;YACA;;YACA;cACA;YACA;UACA,CALA;QAMA,CArBA,EAqBAE,KArBA,CAqBA;UACA;UACA;QACA,CAxBA;MAyBA;IACA,CAhDA;IAiDAC,UAjDA,wBAiDA;MAAA;;MACA;MACA;MACA;QACAvB;MACA,CAFA,EAEAsB,KAFA,CAEA;QACAtB;MACA,CAJA,EAIAwB,OAJA,CAIA;QACA;UACA;UACAC;UACA;QACA,CAJA;MAKA,CAVA;IAWA,CA/DA;IAgEAC,QAhEA,sBAgEA;MACA;MACA;MACA,qBAHA,CAIA;IACA,CArEA;IAsEAC,QAtEA,oBAsEAX,CAtEA,EAsEAY,IAtEA,EAsEA;MAAA;MAAA;;MACA;QACA;UAAA;;UACA;YAAA;UAAA;;UACA;QACA;;QACA;MACA;;MACA;MACA;QAAA;MAAA;MACA;IACA;EAjFA;AApDA","names":["BAvatar","BCardFooter","BRow","BCol","BCardTitle","BAlert","BBadge","BCard","BCardBody","BInputGroup","BFormInput","BInputGroupAppend","BButton","consensusPubkeyToHexAddress","getLocalChains","getCachedValidators","toDay","components","vSelect","DashboardCardHorizontal","data","showPrevote","httpstatus","httpStatusText","roundState","chains","vals","positions","updatetime","rpc","height","round","step","rate","computed","selected","created","beforeDestroy","clearInterval","methods","format","color","i","txt","fetchPosition","fetch","then","update","catch","validators","finally","x2","onchange","showName","text"],"sourceRoot":"src/views","sources":["ConsensusStates.vue"],"sourcesContent":["<template>\n  <div class=\"container-md\">\n    <b-card>\n      <b-row>\n        <b-col>\n          <b-input-group>\n            <b-form-input\n              v-model=\"rpc\"\n              placeholder=\"Button on both side\"\n            />\n            <b-input-group-append>\n              <b-button\n                variant=\"outline-primary\"\n                @click=\"onchange()\"\n              >\n                Monitor\n              </b-button>\n            </b-input-group-append>\n          </b-input-group>\n        </b-col>\n      </b-row>\n      <div\n        v-if=\"httpstatus !== 200\"\n        class=\"text-danger\"\n      >\n        {{ httpstatus }}: {{ httpStatusText }}\n      </div>\n    </b-card>\n    <b-row v-if=\"roundState['height/round/step']\">\n      <b-col\n        lg=\"3\"\n        sm=\"6\"\n      >\n        <dashboard-card-horizontal\n          icon=\"ArrowUpCircleIcon\"\n          color=\"danger\"\n\n          :statistic=\"rate\"\n          statistic-title=\"Onboard Rate\"\n        />\n      </b-col>\n      <b-col\n        lg=\"3\"\n        sm=\"6\"\n      >\n        <dashboard-card-horizontal\n          icon=\"HashIcon\"\n          color=\"success\"\n          :statistic=\"height\"\n          statistic-title=\"Height\"\n        />\n      </b-col>\n      <b-col\n        lg=\"3\"\n        sm=\"6\"\n      >\n        <dashboard-card-horizontal\n          icon=\"RepeatIcon\"\n          :statistic=\"round\"\n          statistic-title=\"Round\"\n        />\n      </b-col>\n      <b-col\n        lg=\"3\"\n        sm=\"6\"\n      >\n        <dashboard-card-horizontal\n          icon=\"CodeIcon\"\n          color=\"info\"\n          :statistic=\"step\"\n          statistic-title=\"Step\"\n        />\n      </b-col>\n    </b-row>\n    <b-card v-if=\"roundState['height/round/step']\">\n      <b-card-title class=\"d-flex justify-content-between\">\n        <small class=\"text-danger\">Updated at {{ format(updatetime) }}</small>\n      </b-card-title>\n      <div\n        v-for=\"item in roundState.height_vote_set\"\n        :key=\"item.round\"\n      >\n        <small>Round: {{ item.round }} {{ item.prevotes_bit_array }}</small>\n        <b-card-body class=\"px-0\">\n          <b-badge\n            v-for=\"(pre, i) in item.prevotes\"\n            :key=\"i\"\n            size=\"sm\"\n            style=\"margin: 2px;\"\n            :variant=\"color(i, pre)\"\n          >\n            <small class=\"small\">{{ showName(i, pre) }}</small>\n          </b-badge>\n        </b-card-body>\n      </div>\n      <b-card-footer>\n        <b-button\n          variant=\"primary\"\n          size=\"sm\"\n        />  Proposer Signed\n        <b-button\n          variant=\"dark\"\n          size=\"sm\"\n        />  Proposer Not Signed\n        <b-button\n          variant=\"success\"\n          size=\"sm\"\n        /> Signed\n        <b-button\n          variant=\"secondary\"\n          size=\"sm\"\n        /> Not Signed\n      </b-card-footer>\n    </b-card>\n\n    <b-alert\n      variant=\"info\"\n      show\n    >\n      <h4 class=\"alert-heading\">\n        Tips\n      </h4>\n      <div class=\"alert-body\">\n        <ul>\n          <li>This tool is useful for validators to monitor who is onboard during an upgrade</li>\n          <li>If you want to change the default rpc endpoint. make sure that \"https\" and \"CORS\" are enabled on your server.</li>\n        </ul>\n      </div>\n    </b-alert>\n  </div>\n</template>\n\n<script>\nimport {\n  BAvatar, BCardFooter, BRow, BCol, BCardTitle, BAlert, BBadge,\n  BCard, BCardBody, BInputGroup, BFormInput, BInputGroupAppend, BButton,\n} from 'bootstrap-vue'\nimport fetch from 'node-fetch'\nimport {\n  consensusPubkeyToHexAddress, getLocalChains, getCachedValidators, toDay,\n} from '@/libs/utils'\nimport vSelect from 'vue-select'\nimport DashboardCardHorizontal from './components/dashboard/DashboardCardHorizontal.vue'\n\nexport default {\n  components: {\n    BAlert,\n    BBadge,\n    BRow,\n    BCol,\n    BCard,\n    BCardBody,\n    BCardFooter,\n    BInputGroup,\n    BFormInput,\n    BInputGroupAppend,\n    BButton,\n    BAvatar,\n    BCardTitle,\n    vSelect,\n    DashboardCardHorizontal,\n  },\n\n  data() {\n    const chains = getLocalChains()\n    return {\n      showPrevote: false,\n      httpstatus: 200,\n      httpStatusText: '',\n      roundState: {},\n      chains,\n      vals: [],\n      positions: [],\n      updatetime: new Date(),\n      rpc: '',\n      height: '-',\n      round: '-',\n      step: '-',\n      rate: '-',\n    }\n  },\n  computed: {\n    selected() {\n      return this.$store.state.chains.selected.chain_name\n    },\n  },\n  created() {\n    this.validators()\n    this.rpc = `${this.chains[this.selected].rpc[0]}/consensus_state`\n    this.fetchPosition()\n    this.update()\n    this.timer = setInterval(this.update, 6000)\n  },\n  beforeDestroy() {\n    clearInterval(this.timer)\n  },\n  methods: {\n    format: v => toDay(v, 'time'),\n    color(i, txt) {\n      if (i === this.roundState.proposer.index) {\n        return txt === 'nil-Vote' ? 'dark' : 'primary'\n      }\n      return txt === 'nil-Vote' ? 'secondary' : 'success'\n    },\n    fetchPosition() {\n      const dumpurl = this.rpc.replace('consensus_state', 'dump_consensus_state')\n      fetch(dumpurl).then(data => {\n        this.httpstatus = data.status\n        this.httpStatusText = data.httpStatusText\n        return data.json()\n      }).then(res => {\n        this.positions = res.result.round_state.validators.validators\n      })\n    },\n    update() {\n      this.rate = '0%'\n      this.updatetime = new Date()\n      if (this.httpstatus === 200) {\n        fetch(this.rpc).then(data => {\n          this.httpstatus = data.status\n          this.httpStatusText = data.httpStatusText\n          return data.json()\n        }).then(res => {\n          this.roundState = res.result.round_state\n          const raw = this.roundState['height/round/step'].split('/')\n          // eslint-disable-next-line prefer-destructuring\n          this.height = raw[0]\n          // eslint-disable-next-line prefer-destructuring\n          this.round = raw[1]\n          // eslint-disable-next-line prefer-destructuring\n          this.step = raw[2]\n\n          // find the highest onboard rate\n          this.roundState.height_vote_set.forEach(element => {\n            const rate = Number(element.prevotes_bit_array.substring(element.prevotes_bit_array.length - 4))\n            if (rate > 0) {\n              this.rate = `${(rate * 100).toFixed()}%`\n            }\n          })\n        }).catch(err => {\n          this.httpstatus = 500\n          this.httpStatusText = err\n        })\n      }\n    },\n    validators() {\n      const conf = this.chains[this.selected]\n      let vals = []\n      this.$http.getValidatorList(conf).then(data => {\n        vals = data\n      }).catch(() => {\n        vals = getCachedValidators(this.selected.chain_name) || []\n      }).finally(() => {\n        this.vals = vals.map(x => {\n          const x2 = x\n          x2.hex = consensusPubkeyToHexAddress(x.consensus_pubkey)\n          return x2\n        })\n      })\n    },\n    onchange() {\n      this.httpstatus = 200\n      this.httpStatusText = ''\n      this.roundState = {}\n      // this.validators()\n    },\n    showName(i, text) {\n      if (text === 'nil-Vote') {\n        if (this.positions[i]) {\n          const val = this.vals.find(x => x.hex === this.positions[i].address)\n          return val?.description?.moniker || i\n        }\n        return i\n      }\n      const txt = text.substring(text.indexOf(':') + 1, text.indexOf(' '))\n      const val = this.vals.find(x => x.hex.startsWith(txt))\n      return val?.description?.moniker || txt\n    },\n  },\n\n}\n</script>\n<style lang=\"scss\">\n@import '@core/scss/vue/libs/vue-select.scss';\n</style>\n"]},"metadata":{},"sourceType":"module"}