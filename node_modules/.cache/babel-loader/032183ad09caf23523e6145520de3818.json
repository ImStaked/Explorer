{"ast":null,"code":"import \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.entries.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport VueQr from 'vue-qr';\nimport { BCard, BCardHeader, BCardBody, BFormInput, BButton } from 'bootstrap-vue';\nimport OperationModal from '@/views/components/OperationModal/index.vue';\nimport { getLocalAccounts } from '@/libs/utils';\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue';\nexport default {\n  components: {\n    BButton: BButton,\n    BCard: BCard,\n    BCardHeader: BCardHeader,\n    BCardBody: BCardBody,\n    BFormInput: BFormInput,\n    VueQr: VueQr,\n    OperationModal: OperationModal\n  },\n  data: function data() {\n    var address = this.$route.params.address;\n    return {\n      address: address\n    };\n  },\n  computed: {\n    fromAddress: function fromAddress() {\n      var _this$$store,\n          _this$$store$state,\n          _this$$store$state$ch,\n          _this = this;\n\n      var key = (_this$$store = this.$store) === null || _this$$store === void 0 ? void 0 : (_this$$store$state = _this$$store.state) === null || _this$$store$state === void 0 ? void 0 : (_this$$store$state$ch = _this$$store$state.chains) === null || _this$$store$state$ch === void 0 ? void 0 : _this$$store$state$ch.defaultWallet;\n\n      if (key) {\n        var accounts = getLocalAccounts() || {};\n        var account = Object.entries(accounts).map(function (v) {\n          return {\n            wallet: v[0],\n            address: v[1].address.find(function (x) {\n              return x.chain === _this.$store.state.chains.selected.chain_name;\n            })\n          };\n        }).filter(function (v) {\n          return v.address;\n        }).find(function (x) {\n          return x.wallet === key;\n        });\n\n        if (account) {\n          return account.address.addr;\n        }\n      }\n\n      return null;\n    }\n  },\n  methods: {\n    copy: function copy() {\n      var _this2 = this;\n\n      this.$copyText(this.address).then(function () {\n        _this2.$toast({\n          component: ToastificationContent,\n          props: {\n            title: 'Address copied',\n            icon: 'BellIcon'\n          }\n        });\n      }, function (e) {\n        _this2.$toast({\n          component: ToastificationContent,\n          props: {\n            title: \"Failed to copy address! \".concat(e),\n            icon: 'BellIcon',\n            variant: 'danger'\n          }\n        });\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AAEA,SACAA,KADA,EACAC,WADA,EACAC,SADA,EACAC,UADA,EACAC,OADA,QAEA,eAFA;AAGA;AACA;AAEA;AAEA;EACAC;IACAD,gBADA;IAEAJ,YAFA;IAGAC,wBAHA;IAIAC,oBAJA;IAKAC,sBALA;IAMAG,YANA;IAOAC;EAPA,CADA;EAUAC,IAVA,kBAUA;IACA;IACA;MACAC;IADA;EAGA,CAfA;EAgBAC;IACAC,WADA,yBACA;MAAA;MAAA;MAAA;MAAA;;MACA;;MACA;QACA;QACA,uCACAC,GADA,CACA;UAAA;YAAAC;YAAAJ;cAAA;YAAA;UAAA;QAAA,CADA,EAEAK,MAFA,CAEA;UAAA;QAAA,CAFA,EAGAC,IAHA,CAGA;UAAA;QAAA,CAHA;;QAIA;UACA;QACA;MACA;;MACA;IACA;EAdA,CAhBA;EAgCAC;IACAC,IADA,kBACA;MAAA;;MACA;QACA;UACAC,gCADA;UAEAC;YACAC,uBADA;YAEAC;UAFA;QAFA;MAOA,CARA,EAQA;QACA;UACAH,gCADA;UAEAC;YACAC,2CADA;YAEAC,gBAFA;YAGAC;UAHA;QAFA;MAQA,CAjBA;IAkBA;EApBA;AAhCA","names":["BCard","BCardHeader","BCardBody","BFormInput","BButton","components","VueQr","OperationModal","data","address","computed","fromAddress","map","wallet","filter","find","methods","copy","component","props","title","icon","variant"],"sourceRoot":"src/views","sources":["WalletAccountReceive.vue"],"sourcesContent":["<template>\n  <div class=\"d-flex justify-content-center\">\n    <b-card>\n      <b-card-header class=\"d-flex justify-content-center\">\n        <h2>Pay Me</h2>\n      </b-card-header>\n      <b-card-body class=\"d-flex justify-content-center flex-column\">\n        <vue-qr :text=\"address\" />\n        <div>\n          {{ address }}\n          <feather-icon\n            icon=\"CopyIcon\"\n            size=\"12\"\n            @click=\"copy()\"\n          />\n        </div>\n        <b-button\n          v-if=\"fromAddress\"\n          v-b-modal.operation-modal\n          block\n          variant=\"success\"\n          class=\"mt-2\"\n        >\n          <feather-icon icon=\"SendIcon\" />\n          Go To Pay\n        </b-button>\n        <b-button\n          v-else\n          block\n          class=\"mt-2\"\n          variant=\"primary\"\n          to=\"/wallet/import\"\n        >\n          Connect Wallet\n        </b-button>\n      </b-card-body>\n    </b-card>\n    <operation-modal\n      :address=\"fromAddress\"\n      :to-address=\"address\"\n      type=\"Transfer\"\n    />\n  </div>\n</template>\n\n<script>\n\nimport VueQr from 'vue-qr'\n\nimport {\n  BCard, BCardHeader, BCardBody, BFormInput, BButton,\n} from 'bootstrap-vue'\nimport OperationModal from '@/views/components/OperationModal/index.vue'\nimport { getLocalAccounts } from '@/libs/utils'\n\nimport ToastificationContent from '@core/components/toastification/ToastificationContent.vue'\n\nexport default {\n  components: {\n    BButton,\n    BCard,\n    BCardHeader,\n    BCardBody,\n    BFormInput,\n    VueQr,\n    OperationModal,\n  },\n  data() {\n    const { address } = this.$route.params\n    return {\n      address,\n    }\n  },\n  computed: {\n    fromAddress() {\n      const key = this.$store?.state?.chains?.defaultWallet\n      if (key) {\n        const accounts = getLocalAccounts() || {}\n        const account = Object.entries(accounts)\n          .map(v => ({ wallet: v[0], address: v[1].address.find(x => x.chain === this.$store.state.chains.selected.chain_name) }))\n          .filter(v => v.address)\n          .find(x => x.wallet === key)\n        if (account) {\n          return account.address.addr\n        }\n      }\n      return null\n    },\n  },\n  methods: {\n    copy() {\n      this.$copyText(this.address).then(() => {\n        this.$toast({\n          component: ToastificationContent,\n          props: {\n            title: 'Address copied',\n            icon: 'BellIcon',\n          },\n        })\n      }, e => {\n        this.$toast({\n          component: ToastificationContent,\n          props: {\n            title: `Failed to copy address! ${e}`,\n            icon: 'BellIcon',\n            variant: 'danger',\n          },\n        })\n      })\n    },\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}