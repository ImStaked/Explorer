{"ast":null,"code":"import _asyncToGenerator from \"/home/imstaked/explorer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/home/imstaked/explorer/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\n\n/*\n * @Description: file\n * @Autor: dingyiming\n * @Date: 2021-11-20 15:26:27\n * @LastEditors: dingyiming\n * @LastEditTime: 2021-11-20 15:33:07\n */\nimport { isTestnet } from '@/libs/utils';\nimport { sha256 } from '@cosmjs/crypto';\nimport { toHex } from '@cosmjs/encoding';\nvar chains = {};\nvar coingecko = {};\n\nvar configs = require.context('../../chains/mainnet', false, /\\.json$/);\n\nif (isTestnet()) {\n  configs = require.context('../../chains/testnet', false, /\\.json$/);\n}\n\nvar update = {};\nconfigs.keys().forEach(function (k) {\n  var c = configs(k);\n  c.chain_name = String(c.chain_name).toLowerCase();\n  update[c.chain_name] = c;\n  c.assets.forEach(function (x) {\n    if (x.coingecko_id && x.coingecko_id !== '') coingecko[x.coingecko_id] = String(x.symbol).toUpperCase();\n  });\n});\nchains = update;\nlocalStorage.setItem('chains', JSON.stringify(update));\nvar selected = chains.cosmos;\nvar avatarcache = localStorage.getItem('avatars');\nexport default {\n  namespaced: true,\n  state: {\n    config: chains,\n    selected: selected,\n    avatars: avatarcache ? JSON.parse(avatarcache) : {},\n    height: 0,\n    ibcChannels: {},\n    quotes: {},\n    defaultWallet: localStorage.getItem('default-wallet'),\n    denoms: {},\n    ibcPaths: {}\n  },\n  getters: {\n    getchains: function getchains(state) {\n      return state.chains;\n    },\n    getAvatarById: function getAvatarById(state) {\n      return function (id) {\n        return state.avatars[id];\n      };\n    }\n  },\n  mutations: {\n    setup_sdk_version: function setup_sdk_version(state, info) {\n      state.chains.config[info.chain_name].sdk_version = info.version;\n    },\n    select: function select(state, args) {\n      state.chains.selected = state.chains.config[args.chain_name];\n    },\n    cacheAvatar: function cacheAvatar(state, args) {\n      state.chains.avatars[args.identity] = args.url;\n      localStorage.setItem('avatars', JSON.stringify(state.chains.avatars));\n    },\n    setHeight: function setHeight(state, height) {\n      state.chains.height = height;\n    },\n    setChannels: function setChannels(state, _ref) {\n      var chain = _ref.chain,\n          channels = _ref.channels;\n      state.chains.ibcChannels[chain] = channels;\n    },\n    setQuotes: function setQuotes(state, quotes) {\n      state.quotes = quotes;\n    },\n    setDefaultWallet: function setDefaultWallet(state, defaultWallet) {\n      if (defaultWallet && defaultWallet.length > 0) {\n        localStorage.setItem('default-wallet', defaultWallet);\n        state.chains.defaultWallet = defaultWallet;\n      } else {\n        state.chains.defaultWallet = null;\n      }\n    },\n    setIBCDenoms: function setIBCDenoms(state, denoms) {\n      state.denoms = _objectSpread(_objectSpread({}, state.denoms), denoms);\n    },\n    setIBCPaths: function setIBCPaths(state, paths) {\n      state.ibcPaths = paths;\n    }\n  },\n  actions: {\n    getQuotes: function getQuotes(context) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var keys, currencies;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // fetch('https://price.ping.pub/quotes').then(data => data.json()).then(data => {\n                //   context.commit('setQuotes', data)\n                // })\n                keys = Object.keys(coingecko);\n\n                if (keys.length > 0) {\n                  currencies = 'usd,cny,eur,jpy,krw,sgd,hkd';\n                  fetch(\"https://api.coingecko.com/api/v3/simple/price?vs_currencies=\".concat(currencies, \"&ids=\").concat(keys.join(','))).then(function (data) {\n                    return data.json();\n                  }).then(function (data) {\n                    // use symbol as key instead of coingecko id\n                    var quotes = {};\n                    Object.keys(data).forEach(function (k) {\n                      quotes[coingecko[k]] = data[k];\n                    });\n                    context.commit('setQuotes', quotes);\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    getAllIBCDenoms: function getAllIBCDenoms(context, _this) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this.$http.getAllIBCDenoms().then(function (x) {\n                  var denomsMap = {};\n                  var pathsMap = {};\n                  x.denom_traces.forEach(function (trace) {\n                    var hash = toHex(sha256(new TextEncoder().encode(\"\".concat(trace.path, \"/\").concat(trace.base_denom))));\n                    var ibcDenom = \"ibc/\".concat(hash.toUpperCase());\n                    denomsMap[ibcDenom] = trace.base_denom;\n                    var path = trace.path.split('/');\n\n                    if (path.length >= 2) {\n                      pathsMap[ibcDenom] = {\n                        channel_id: path[path.length - 1],\n                        port_id: path[path.length - 2]\n                      };\n                    }\n                  });\n                  context.commit('setIBCDenoms', denomsMap);\n                  context.commit('setIBCPaths', pathsMap);\n                });\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["isTestnet","sha256","toHex","chains","coingecko","configs","require","context","update","keys","forEach","k","c","chain_name","String","toLowerCase","assets","x","coingecko_id","symbol","toUpperCase","localStorage","setItem","JSON","stringify","selected","cosmos","avatarcache","getItem","namespaced","state","config","avatars","parse","height","ibcChannels","quotes","defaultWallet","denoms","ibcPaths","getters","getchains","getAvatarById","id","mutations","setup_sdk_version","info","sdk_version","version","select","args","cacheAvatar","identity","url","setHeight","setChannels","chain","channels","setQuotes","setDefaultWallet","length","setIBCDenoms","setIBCPaths","paths","actions","getQuotes","Object","currencies","fetch","join","then","data","json","commit","getAllIBCDenoms","_this","$http","denomsMap","pathsMap","denom_traces","trace","hash","TextEncoder","encode","path","base_denom","ibcDenom","split","channel_id","port_id"],"sources":["/home/imstaked/explorer/src/store/chains/index.js"],"sourcesContent":["/*\n * @Description: file\n * @Autor: dingyiming\n * @Date: 2021-11-20 15:26:27\n * @LastEditors: dingyiming\n * @LastEditTime: 2021-11-20 15:33:07\n */\nimport { isTestnet } from '@/libs/utils'\nimport { sha256 } from '@cosmjs/crypto'\nimport { toHex } from '@cosmjs/encoding'\n\nlet chains = {}\nconst coingecko = {}\nlet configs = require.context('../../chains/mainnet', false, /\\.json$/)\nif (isTestnet()) {\n  configs = require.context('../../chains/testnet', false, /\\.json$/)\n}\n\nconst update = {}\nconfigs.keys().forEach(k => {\n  const c = configs(k)\n  c.chain_name = String(c.chain_name).toLowerCase()\n  update[c.chain_name] = c\n  c.assets.forEach(x => {\n    if (x.coingecko_id && x.coingecko_id !== '') coingecko[x.coingecko_id] = String(x.symbol).toUpperCase()\n  })\n})\n\nchains = update\nlocalStorage.setItem('chains', JSON.stringify(update))\nconst selected = chains.cosmos\n\nconst avatarcache = localStorage.getItem('avatars')\n\nexport default {\n  namespaced: true,\n  state: {\n    config: chains,\n    selected,\n    avatars: avatarcache ? JSON.parse(avatarcache) : {},\n    height: 0,\n    ibcChannels: {},\n    quotes: {},\n    defaultWallet: localStorage.getItem('default-wallet'),\n    denoms: {},\n    ibcPaths: {},\n  },\n  getters: {\n    getchains: state => state.chains,\n    getAvatarById: state => id => state.avatars[id],\n  },\n  mutations: {\n    setup_sdk_version(state, info) {\n      state.chains.config[info.chain_name].sdk_version = info.version\n    },\n    select(state, args) {\n      state.chains.selected = state.chains.config[args.chain_name]\n    },\n    cacheAvatar(state, args) {\n      state.chains.avatars[args.identity] = args.url\n      localStorage.setItem('avatars', JSON.stringify(state.chains.avatars))\n    },\n    setHeight(state, height) {\n      state.chains.height = height\n    },\n    setChannels(state, { chain, channels }) {\n      state.chains.ibcChannels[chain] = channels\n    },\n    setQuotes(state, quotes) {\n      state.quotes = quotes\n    },\n    setDefaultWallet(state, defaultWallet) {\n      if (defaultWallet && defaultWallet.length > 0) {\n        localStorage.setItem('default-wallet', defaultWallet)\n        state.chains.defaultWallet = defaultWallet\n      } else {\n        state.chains.defaultWallet = null\n      }\n    },\n    setIBCDenoms(state, denoms) {\n      state.denoms = { ...state.denoms, ...denoms }\n    },\n    setIBCPaths(state, paths) {\n      state.ibcPaths = paths\n    },\n  },\n  actions: {\n    async getQuotes(context) {\n      // fetch('https://price.ping.pub/quotes').then(data => data.json()).then(data => {\n      //   context.commit('setQuotes', data)\n      // })\n      const keys = Object.keys(coingecko)\n      if (keys.length > 0) {\n        const currencies = 'usd,cny,eur,jpy,krw,sgd,hkd'\n        fetch(`https://api.coingecko.com/api/v3/simple/price?vs_currencies=${currencies}&ids=${keys.join(',')}`).then(data => data.json()).then(data => {\n          // use symbol as key instead of coingecko id\n          const quotes = {}\n          Object.keys(data).forEach(k => {\n            quotes[coingecko[k]] = data[k]\n          })\n          context.commit('setQuotes', quotes)\n        })\n      }\n    },\n\n    async getAllIBCDenoms(context, _this) {\n      _this.$http.getAllIBCDenoms().then(x => {\n        const denomsMap = {}\n        const pathsMap = {}\n        x.denom_traces.forEach(trace => {\n          const hash = toHex(sha256(new TextEncoder().encode(`${trace.path}/${trace.base_denom}`)))\n          const ibcDenom = `ibc/${hash.toUpperCase()}`\n          denomsMap[ibcDenom] = trace.base_denom\n\n          const path = trace.path.split('/')\n          if (path.length >= 2) {\n            pathsMap[ibcDenom] = {\n              channel_id: path[path.length - 1],\n              port_id: path[path.length - 2],\n            }\n          }\n        })\n        context.commit('setIBCDenoms', denomsMap)\n        context.commit('setIBCPaths', pathsMap)\n      })\n    },\n  },\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}