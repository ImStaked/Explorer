{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.find-index.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BTable, BCard, BCardHeader, BCardTitle, VBTooltip, BTab, BTabs } from 'bootstrap-vue';\nimport { getCachedValidators, getStakingValidatorByHex, toDay, abbr, abbrMessage, tokenFormatter } from '@/libs/utils';\nimport { decodeTxRaw } from '@cosmjs/proto-signing';\nimport { fromBase64 } from '@cosmjs/encoding';\nimport Tx from '@/libs/data/tx'; // import fetch from 'node-fetch'\n\nexport default {\n  components: {\n    BTab: BTab,\n    BTabs: BTabs,\n    BCard: BCard,\n    BTable: BTable,\n    BCardHeader: BCardHeader,\n    BCardTitle: BCardTitle\n  },\n  directives: {\n    'b-tooltip': VBTooltip\n  },\n  data: function data() {\n    return {\n      islive: true,\n      blocks: [],\n      txs: [],\n      list_fields: [{\n        key: 'height',\n        sortable: true\n      }, {\n        key: 'hash',\n        thClass: 'd-none d-lg-block',\n        tdClass: 'd-none d-lg-block text-truncate'\n      }, {\n        key: 'proposer',\n        tdClass: 'text-truncate'\n      }, {\n        key: 'txs'\n      }, {\n        key: 'time',\n        thClass: 'd-none d-md-block',\n        tdClass: 'd-none d-md-block'\n      }],\n      txFields: [{\n        key: 'hash'\n      }, {\n        key: 'time',\n        formatter: function formatter(v) {\n          return toDay(v, 'from');\n        }\n      }, {\n        key: 'fee',\n        formatter: function formatter(v) {\n          return tokenFormatter(v);\n        }\n      }, {\n        key: 'messages',\n        formatter: function formatter(v) {\n          return abbrMessage(v);\n        }\n      }, {\n        key: 'memo'\n      }]\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$http.getLatestBlock().then(function (res) {\n      _this.blocks.push(res);\n\n      var list = [];\n      var height = res.block.header.height;\n\n      for (var i = 1; i < 10; i += 1) {\n        list.push(height - i);\n      }\n\n      if (!getCachedValidators()) {\n        _this.$http.getValidatorList();\n      }\n\n      var promise = Promise.resolve();\n      list.forEach(function (item) {\n        promise = promise.then(function () {\n          return new Promise(function (resolve) {\n            _this.$http.getBlockByHeight(item).then(function (b) {\n              resolve();\n\n              _this.blocks.push(b);\n\n              if (_this.txs.length < 20) {\n                _this.extractTx(b, 'tail');\n              }\n            });\n          });\n        });\n      });\n      _this.timer = setInterval(_this.fetch, 6000);\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.islive = false;\n    clearInterval(this.timer);\n  },\n  methods: {\n    length: function length(v) {\n      return Array.isArray(v) ? v.length : 0;\n    },\n    shortHash: function shortHash(v) {\n      return abbr(v);\n    },\n    formatTime: function formatTime(v) {\n      return toDay(v, 'from');\n    },\n    formatProposer: function formatProposer(v) {\n      return getStakingValidatorByHex(this.$http.config.chain_name, v);\n    },\n    fetch: function fetch() {\n      var _this2 = this;\n\n      this.$http.getLatestBlock().then(function (b) {\n        var has = _this2.blocks.findIndex(function (x) {\n          return x.block.header.height === b.block.header.height;\n        });\n\n        if (has < 0) {\n          _this2.blocks.unshift(b);\n\n          _this2.extractTx(b);\n        }\n\n        if (_this2.blocks.length > 200) _this2.blocks.pop();\n      });\n    },\n    extractTx: function extractTx(block) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'head';\n      var txs = block.block.data.txs;\n      if (txs === null) return;\n\n      for (var i = 0; i < txs.length; i += 1) {\n        var tx = new Tx();\n\n        try {\n          var origin = decodeTxRaw(fromBase64(txs[i]));\n          tx = Tx.create(origin);\n          tx.time = block.block.header.time;\n        } catch (e) {// catch errors\n        }\n\n        tx.setHash(txs[i]);\n\n        if (direction === 'head') {\n          this.txs.unshift(tx);\n\n          if (this.txs.length > 200) {\n            this.txs.pop();\n          }\n        } else if (this.txs.length < 100) {\n          this.txs.push(tx);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,SACAA,MADA,EACAC,KADA,EACAC,WADA,EACAC,UADA,EACAC,SADA,EACAC,IADA,EACAC,KADA,QAEA,eAFA;AAGA,SACAC,mBADA,EAEAC,wBAFA,EAGAC,KAHA,EAGAC,IAHA,EAGAC,WAHA,EAGAC,cAHA,QAIA,cAJA;AAKA;AACA;AACA,gC,CACA;;AAEA;EACAC;IACAR,UADA;IAEAC,YAFA;IAGAL,YAHA;IAIAD,cAJA;IAKAE,wBALA;IAMAC;EANA,CADA;EASAW;IACA;EADA,CATA;EAYAC,IAZA,kBAYA;IACA;MACAC,YADA;MAEAC,UAFA;MAGAC,OAHA;MAIAC,cACA;QACAC,aADA;QAEAC;MAFA,CADA,EAKA;QACAD,WADA;QAEAE,4BAFA;QAGAC;MAHA,CALA,EAUA;QACAH,eADA;QAEAG;MAFA,CAVA,EAcA;QACAH;MADA,CAdA,EAiBA;QACAA,WADA;QAEAE,4BAFA;QAGAC;MAHA,CAjBA,CAJA;MA2BAC,WACA;QAAAJ;MAAA,CADA,EAEA;QAAAA;QAAAK;UAAA;QAAA;MAAA,CAFA,EAGA;QAAAL;QAAAK;UAAA;QAAA;MAAA,CAHA,EAIA;QAAAL;QAAAK;UAAA;QAAA;MAAA,CAJA,EAKA;QAAAL;MAAA,CALA;IA3BA;EAmCA,CAhDA;EAiDAM,OAjDA,qBAiDA;IAAA;;IACA;MACA;;MACA;MACA;;MACA;QACAC;MACA;;MAEA;QACA;MACA;;MAEA;MACAA;QACAC;UAAA;YACA;cACAC;;cACA;;cACA;gBACA;cACA;YACA,CANA;UAOA,CARA;QAAA;MASA,CAVA;MAWA;IACA,CAzBA;EA0BA,CA5EA;EA6EAC,aA7EA,2BA6EA;IACA;IACAC;EACA,CAhFA;EAiFAC;IACAC;MAAA;IAAA,CADA;IAEAC;MAAA;IAAA,CAFA;IAGAC;MAAA;IAAA,CAHA;IAIAC,cAJA,0BAIAC,CAJA,EAIA;MACA;IACA,CANA;IAOAC,KAPA,mBAOA;MAAA;;MACA;QACA;UAAA;QAAA;;QACA;UACA;;UACA;QACA;;QACA;MACA,CAPA;IAQA,CAhBA;IAiBAC,SAjBA,qBAiBAC,KAjBA,EAiBA;MAAA;MACA;MACA;;MACA;QACA;;QACA;UACA;UACAC;UACAA;QACA,CAJA,CAIA,WACA;QACA;;QACAA;;QACA;UACA;;UACA;YACA;UACA;QACA,CALA,MAKA;UACA;QACA;MACA;IACA;EAvCA;AAjFA","names":["BTable","BCard","BCardHeader","BCardTitle","VBTooltip","BTab","BTabs","getCachedValidators","getStakingValidatorByHex","toDay","abbr","abbrMessage","tokenFormatter","components","directives","data","islive","blocks","txs","list_fields","key","sortable","thClass","tdClass","txFields","formatter","created","list","promise","resolve","beforeDestroy","clearInterval","methods","length","shortHash","formatTime","formatProposer","v","fetch","extractTx","block","tx"],"sourceRoot":"src/views","sources":["Blocks.vue"],"sourcesContent":["<template>\n  <div>\n    <b-card\n      no-body\n      class=\"text-truncate\"\n    >\n      <b-tabs\n        pills\n        class=\"mt-1\"\n      >\n        <b-tab\n          title=\"Recent\"\n          disabled\n        />\n        <b-tab\n          title=\"Blocks\"\n          active\n        >\n          <b-table\n            :items=\"blocks\"\n            :fields=\"list_fields\"\n            :sort-desc=\"true\"\n            sort-by=\"tokens\"\n            striped\n            hover\n            stacked=\"sm\"\n          >\n            <!-- Column: Height -->\n            <template #cell(height)=\"data\">\n              <router-link :to=\"`./blocks/${data.item.block.header.height}`\">\n                {{ data.item.block.header.height }}\n              </router-link>\n            </template>\n            <template #cell(hash)=\"data\">\n              <small>{{ data.item.block_id.hash }}</small>\n            </template>\n            <template #cell(time)=\"data\">\n              {{ formatTime(data.item.block.header.time) }}\n            </template>\n            <template #cell(proposer)=\"data\">\n              {{ formatProposer(data.item.block.header.proposer_address) }}\n            </template>\n            <template #cell(txs)=\"data\">\n              {{ length(data.item.block.data.txs) }}\n            </template>\n\n          </b-table>\n        </b-tab>\n        <b-tab title=\"Transactions\">\n          <b-table\n            :items=\"txs\"\n            :fields=\"txFields\"\n            responsive=\"sm\"\n          >\n            <template #cell(hash)=\"data\">\n              <router-link :to=\"`./tx/${data.value}`\">\n                {{ shortHash(data.value) }}\n              </router-link>\n            </template>\n          </b-table>\n        </b-tab>\n      </b-tabs>\n    </b-card>\n  </div>\n</template>\n\n<script>\nimport {\n  BTable, BCard, BCardHeader, BCardTitle, VBTooltip, BTab, BTabs,\n} from 'bootstrap-vue'\nimport {\n  getCachedValidators,\n  getStakingValidatorByHex,\n  toDay, abbr, abbrMessage, tokenFormatter,\n} from '@/libs/utils'\nimport { decodeTxRaw } from '@cosmjs/proto-signing'\nimport { fromBase64 } from '@cosmjs/encoding'\nimport Tx from '@/libs/data/tx'\n// import fetch from 'node-fetch'\n\nexport default {\n  components: {\n    BTab,\n    BTabs,\n    BCard,\n    BTable,\n    BCardHeader,\n    BCardTitle,\n  },\n  directives: {\n    'b-tooltip': VBTooltip,\n  },\n  data() {\n    return {\n      islive: true,\n      blocks: [],\n      txs: [],\n      list_fields: [\n        {\n          key: 'height',\n          sortable: true,\n        },\n        {\n          key: 'hash',\n          thClass: 'd-none d-lg-block',\n          tdClass: 'd-none d-lg-block text-truncate',\n        },\n        {\n          key: 'proposer',\n          tdClass: 'text-truncate',\n        },\n        {\n          key: 'txs',\n        },\n        {\n          key: 'time',\n          thClass: 'd-none d-md-block',\n          tdClass: 'd-none d-md-block',\n        },\n      ],\n      txFields: [\n        { key: 'hash' },\n        { key: 'time', formatter: v => toDay(v, 'from') },\n        { key: 'fee', formatter: v => tokenFormatter(v) },\n        { key: 'messages', formatter: v => abbrMessage(v) },\n        { key: 'memo' },\n      ],\n    }\n  },\n  created() {\n    this.$http.getLatestBlock().then(res => {\n      this.blocks.push(res)\n      const list = []\n      const { height } = res.block.header\n      for (let i = 1; i < 10; i += 1) {\n        list.push(height - i)\n      }\n\n      if (!getCachedValidators()) {\n        this.$http.getValidatorList()\n      }\n\n      let promise = Promise.resolve()\n      list.forEach(item => {\n        promise = promise.then(() => new Promise(resolve => {\n          this.$http.getBlockByHeight(item).then(b => {\n            resolve()\n            this.blocks.push(b)\n            if (this.txs.length < 20) {\n              this.extractTx(b, 'tail')\n            }\n          })\n        }))\n      })\n      this.timer = setInterval(this.fetch, 6000)\n    })\n  },\n  beforeDestroy() {\n    this.islive = false\n    clearInterval(this.timer)\n  },\n  methods: {\n    length: v => (Array.isArray(v) ? v.length : 0),\n    shortHash: v => abbr(v),\n    formatTime: v => toDay(v, 'from'),\n    formatProposer(v) {\n      return getStakingValidatorByHex(this.$http.config.chain_name, v)\n    },\n    fetch() {\n      this.$http.getLatestBlock().then(b => {\n        const has = this.blocks.findIndex(x => x.block.header.height === b.block.header.height)\n        if (has < 0) {\n          this.blocks.unshift(b)\n          this.extractTx(b)\n        }\n        if (this.blocks.length > 200) this.blocks.pop()\n      })\n    },\n    extractTx(block, direction = 'head') {\n      const { txs } = block.block.data\n      if (txs === null) return\n      for (let i = 0; i < txs.length; i += 1) {\n        let tx = new Tx()\n        try {\n          const origin = decodeTxRaw(fromBase64(txs[i]))\n          tx = Tx.create(origin)\n          tx.time = block.block.header.time\n        } catch (e) {\n          // catch errors\n        }\n        tx.setHash(txs[i])\n        if (direction === 'head') {\n          this.txs.unshift(tx)\n          if (this.txs.length > 200) {\n            this.txs.pop()\n          }\n        } else if (this.txs.length < 100) {\n          this.txs.push(tx)\n        }\n      }\n    },\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}